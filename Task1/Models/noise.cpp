#include "noise.h"
/**
 * @brief Constructs a Noise object.
 *
 * This constructor initializes a Noise object.
 */
Noise::Noise() {}

/**
 * @brief Adds uniform noise to the input image.
 *
 * This function adds uniform noise to the input image. Uniform noise has a constant intensity
 * level across the image and is generated by randomly sampling values from a uniform distribution.
 *
 * @param img The input image to which uniform noise will be added.
 * @return The image with uniform noise added.
 */
Mat Noise::uniformNoise(Mat img)
{
    // Create a copy of the input image to store the result
    Mat result = img.clone();

    // Generate uniform noise and add it to the image
    Mat noise = Mat(img.size(), img.type());
    randu(noise, 0, 50); // Random values between 0 and 50
    result += noise;

    // Return the image with added uniform noise
    return result;
}

/**
 * @brief Adds salt-and-pepper noise to the input image.
 *
 * This function adds salt-and-pepper noise to the input image. Salt-and-pepper noise is a type of
 * impulse noise where random pixels in the image are set to either black or white. The intensity
 * of salt-and-pepper noise is controlled by the parameter 'r', which determines the probability
 * of a pixel being set to either black or white.
 *
 * @param img The input image to which salt-and-pepper noise will be added.
 * @param r The probability parameter for salt-and-pepper noise (higher values lead to more noise).
 * @return The image with salt-and-pepper noise added.
 */
Mat Noise::saltAndPepperNoise(Mat img, int r) {
    // Create a copy of the input image to store the result
    Mat resultImg = img.clone();

    // Add salt-and-pepper noise to the image
    int random = 0;
    for (int i = 0; i < resultImg.rows; i++) {
        for (int k = 0; k < resultImg.cols; k++) {
            random = rand() % r + 1;
            if (random == 1)
                resultImg.at<uchar>(i, k) = 255; // Salt
            else if (random == 2)
                resultImg.at<uchar>(i, k) = 0;   // Pepper
        }
    }

    // Return the image with added salt-and-pepper noise
    return resultImg;
}

/**
 * @brief Adds Gaussian noise to the input image.
 *
 * This function adds Gaussian noise to the input image. Gaussian noise is a type of random noise
 * that follows a Gaussian (normal) distribution. The parameters 'mean' and 'sigma' control the
 * center and spread of the Gaussian distribution, respectively.
 *
 * @param img The input image to which Gaussian noise will be added.
 * @param mean The mean of the Gaussian distribution.
 * @param sigma The standard deviation (sigma) of the Gaussian distribution.
 * @return The image with Gaussian noise added.
 */
Mat Noise::gasussianNoise(Mat img, float mean, float sigma){
    // Create a copy of the input image to store the result
    Mat result = img.clone();

    // Generate Gaussian noise and add it to the image
    Mat noise = Mat(img.size(), img.type());
    randn(noise, mean, sigma); // Generate random values from a Gaussian distribution
    result += noise;

    // Return the image with added Gaussian noise
    return result;
}
